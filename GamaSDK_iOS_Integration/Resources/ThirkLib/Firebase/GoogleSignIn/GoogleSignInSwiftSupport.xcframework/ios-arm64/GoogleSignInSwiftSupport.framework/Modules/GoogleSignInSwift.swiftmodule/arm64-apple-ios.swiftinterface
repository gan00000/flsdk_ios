// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 effective-4.1.50 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name GoogleSignInSwift
import Combine
import CoreGraphics
import Foundation
@_exported import GoogleSignInSwift
import Swift
import SwiftUI
import _Concurrency
@available(iOS 13.0, macOS 10.15, *)
@_Concurrency.MainActor(unsafe) public struct GoogleSignInButton : SwiftUI.View {
  @SwiftUI.ObservedObject @_projectedValueProperty($viewModel) @_Concurrency.MainActor(unsafe) public var viewModel: GoogleSignInSwift.GoogleSignInButtonViewModel {
    get
    @available(iOS 13.0, macOS 10.15, *)
    set
    @available(iOS 13.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $viewModel: SwiftUI.ObservedObject<GoogleSignInSwift.GoogleSignInButtonViewModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(viewModel: GoogleSignInSwift.GoogleSignInButtonViewModel = GoogleSignInButtonViewModel(), action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public init(scheme: GoogleSignInSwift.GoogleSignInButtonColorScheme = .light, style: GoogleSignInSwift.GoogleSignInButtonStyle = .standard, state: GoogleSignInSwift.GoogleSignInButtonState = .normal, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17GoogleSignInSwift0abC6ButtonV4bodyQrvp", 0) __
}
@available(iOS 13.0, macOS 10.15, *)
public enum GoogleSignInButtonStyle : Swift.String, Swift.Identifiable, Swift.CaseIterable {
  case standard
  case wide
  case icon
  public var id: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [GoogleSignInSwift.GoogleSignInButtonStyle]
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  public static var allCases: [GoogleSignInSwift.GoogleSignInButtonStyle] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, *)
public enum GoogleSignInButtonColorScheme : Swift.String, Swift.Identifiable, Swift.CaseIterable {
  case dark
  case light
  public var id: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [GoogleSignInSwift.GoogleSignInButtonColorScheme]
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  public static var allCases: [GoogleSignInSwift.GoogleSignInButtonColorScheme] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, *)
public enum GoogleSignInButtonState : Swift.String, Swift.Identifiable, Swift.CaseIterable {
  case normal
  case disabled
  case pressed
  public var id: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [GoogleSignInSwift.GoogleSignInButtonState]
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  public static var allCases: [GoogleSignInSwift.GoogleSignInButtonState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, *)
public class GoogleSignInButtonViewModel : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($scheme) public var scheme: GoogleSignInSwift.GoogleSignInButtonColorScheme {
    get
    @available(iOS 13.0, macOS 10.15, *)
    set
    @available(iOS 13.0, macOS 10.15, *)
    _modify
  }
  public var $scheme: Combine.Published<GoogleSignInSwift.GoogleSignInButtonColorScheme>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($style) public var style: GoogleSignInSwift.GoogleSignInButtonStyle {
    get
    @available(iOS 13.0, macOS 10.15, *)
    set
    @available(iOS 13.0, macOS 10.15, *)
    _modify
  }
  public var $style: Combine.Published<GoogleSignInSwift.GoogleSignInButtonStyle>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($state) public var state: GoogleSignInSwift.GoogleSignInButtonState {
    get
    @available(iOS 13.0, macOS 10.15, *)
    set
    @available(iOS 13.0, macOS 10.15, *)
    _modify
  }
  public var $state: Combine.Published<GoogleSignInSwift.GoogleSignInButtonState>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @available(iOS 13.0, macOS 10.15, *)
  public init(scheme: GoogleSignInSwift.GoogleSignInButtonColorScheme = .light, style: GoogleSignInSwift.GoogleSignInButtonStyle = .standard, state: GoogleSignInSwift.GoogleSignInButtonState = .normal)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonStyle : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonStyle : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonColorScheme : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonColorScheme : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonColorScheme : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonState : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonState : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, *)
extension GoogleSignInSwift.GoogleSignInButtonState : Swift.RawRepresentable {}
